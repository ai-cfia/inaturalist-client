# coding: utf-8

"""
iNaturalist API

# https://api.inaturalist.org/v1/  [iNaturalist](https://www.inaturalist.org/) is a global community of naturalists, scientists, and members of the public sharing over a million wildlife sightings to teach one another about the natural world while creating high quality citizen science data for science and conservation.  These API methods return data in JSON/JSONP and PNG response formats. They are meant to supplement the existing [iNaturalist API](https://www.inaturalist.org/pages/api+reference), implemented in Ruby on Rails, which has more functionality and supports more write operations, but tends to be slower and have less consistent response formats. Visit our [developers page](https://www.inaturalist.org/pages/developers) for more information. Write operations that expect and return JSON describe a single `body` parameter that represents the request body, which should be specified as JSON. See the \"Model\" of each body parameter for attributes that we accept in these JSON objects.  Multiple values for a single URL parameter should be separated by commas, e.g. `taxon_id=1,2,3`.  Map tiles are generated using the [node-mapnik](https://github.com/mapnik/node-mapnik) library, following the XYZ map tiling scheme. The \"Observation Tile\" methods accept nearly all the parameters of the observation search APIs, and will generate map tiles reflecting the same observations returned by searches. These \"Observation Tile\" methods have corresponding [UTFGrid](https://github.com/mapbox/utfgrid-spec) JSON responses which return information needed to make interactive maps.  Authentication in the Node API is handled via JSON Web Tokens (JWT). To obtain one, make an [OAuth-authenticated request](http://www.inaturalist.org/pages/api+reference#auth) to https://www.inaturalist.org/users/api_token. Each JWT will expire after 24 hours. Authentication required for all PUT and POST requests. Some GET requests will also include private information like hidden coordinates if the authenticated user has permission to view them.  Photos served from https://static.inaturalist.org and https://inaturalist-open-data.s3.amazonaws.com have multiple size variants and not all size variants are returned in responses. To access other sizes, the photo URL can be modified to replace only the size qualifier (each variant shares the exact same extension). The domain a photo is hosted under reflects the license under which the photo is being shared, and the domain may change over time if the license changes. Photos in the `inaturalist-open-data` domain are shared under open licenses. These can be accessed in bulk in the [iNaturalist AWS Open Dataset]( https://registry.opendata.aws/inaturalist-open-data/). Photos in the `static.inaturalist.org` domain do not have open licenses.  The available photo sizes are: * original (max 2048px in either dimension) * large (max 1024px in either dimension) * medium (max 500px in either dimension) * small (max 240px in either dimension) * thumb (max 100px in either dimension) * square (75px square)  iNaturalist Website: https://www.inaturalist.org/  Open Source Software: https://github.com/inaturalist/  ## Terms of Use  Use of this API is subject to the iNaturalist [Terms of Service](https://www.inaturalist.org/terms) and [Privacy Policy](https://www.inaturalist.org/privacy). We will block any use of our API that violates our Terms or Privacy Policy without notice. The API is intended to support application development, not data scraping. For pre- generated data exports, see https://www.inaturalist.org/pages/developers.  Please note that we throttle API usage to a max of 100 requests per minute, though we ask that you try to keep it to 60 requests per minute or lower, and to keep under 10,000 requests per day. If we notice usage that has serious impact on our performance we may institute blocks without notification.  Terms of Service: https://www.inaturalist.org/terms  Privacy Policy: https://www.inaturalist.org/privacy

The version of the OpenAPI document: 1.3.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from typing import Any, Dict, List, Optional, Tuple, Union

from pydantic import Field, StrictBool, StrictFloat, StrictInt, StrictStr, validate_call
from typing_extensions import Annotated

from inaturalist_client.api_client import ApiClient, RequestSerialized
from inaturalist_client.api_response import ApiResponse
from inaturalist_client.rest import RESTResponseType


class SearchApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    async def search_get(
        self,
        q: Annotated[
            Optional[StrictStr], Field(description="Search object properties")
        ] = None,
        sources: Annotated[
            Optional[List[StrictStr]], Field(description="Must be of this type")
        ] = None,
        place_id: Annotated[
            Optional[List[StrictStr]],
            Field(description="Must be associated with this place"),
        ] = None,
        include_taxon_ancestors: Annotated[
            Optional[StrictBool],
            Field(description="Include taxon ancestors in the response"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results to return in a `page`. The maximum value is generally 200 unless otherwise noted "
            ),
        ] = None,
        locale: Annotated[
            Optional[StrictStr],
            Field(description="Locale preference for taxon common names "),
        ] = None,
        preferred_place_id: Annotated[
            Optional[StrictInt],
            Field(description="Place preference for regional taxon common names "),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Site Search

        Given zero to many of following parameters, returns object matching the search criteria

        :param q: Search object properties
        :type q: str
        :param sources: Must be of this type
        :type sources: List[str]
        :param place_id: Must be associated with this place
        :type place_id: List[str]
        :param include_taxon_ancestors: Include taxon ancestors in the response
        :type include_taxon_ancestors: bool
        :param per_page: Number of results to return in a `page`. The maximum value is generally 200 unless otherwise noted
        :type per_page: str
        :param locale: Locale preference for taxon common names
        :type locale: str
        :param preferred_place_id: Place preference for regional taxon common names
        :type preferred_place_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._search_get_serialize(
            q=q,
            sources=sources,
            place_id=place_id,
            include_taxon_ancestors=include_taxon_ancestors,
            per_page=per_page,
            locale=locale,
            preferred_place_id=preferred_place_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    async def search_get_with_http_info(
        self,
        q: Annotated[
            Optional[StrictStr], Field(description="Search object properties")
        ] = None,
        sources: Annotated[
            Optional[List[StrictStr]], Field(description="Must be of this type")
        ] = None,
        place_id: Annotated[
            Optional[List[StrictStr]],
            Field(description="Must be associated with this place"),
        ] = None,
        include_taxon_ancestors: Annotated[
            Optional[StrictBool],
            Field(description="Include taxon ancestors in the response"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results to return in a `page`. The maximum value is generally 200 unless otherwise noted "
            ),
        ] = None,
        locale: Annotated[
            Optional[StrictStr],
            Field(description="Locale preference for taxon common names "),
        ] = None,
        preferred_place_id: Annotated[
            Optional[StrictInt],
            Field(description="Place preference for regional taxon common names "),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Site Search

        Given zero to many of following parameters, returns object matching the search criteria

        :param q: Search object properties
        :type q: str
        :param sources: Must be of this type
        :type sources: List[str]
        :param place_id: Must be associated with this place
        :type place_id: List[str]
        :param include_taxon_ancestors: Include taxon ancestors in the response
        :type include_taxon_ancestors: bool
        :param per_page: Number of results to return in a `page`. The maximum value is generally 200 unless otherwise noted
        :type per_page: str
        :param locale: Locale preference for taxon common names
        :type locale: str
        :param preferred_place_id: Place preference for regional taxon common names
        :type preferred_place_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._search_get_serialize(
            q=q,
            sources=sources,
            place_id=place_id,
            include_taxon_ancestors=include_taxon_ancestors,
            per_page=per_page,
            locale=locale,
            preferred_place_id=preferred_place_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    async def search_get_without_preload_content(
        self,
        q: Annotated[
            Optional[StrictStr], Field(description="Search object properties")
        ] = None,
        sources: Annotated[
            Optional[List[StrictStr]], Field(description="Must be of this type")
        ] = None,
        place_id: Annotated[
            Optional[List[StrictStr]],
            Field(description="Must be associated with this place"),
        ] = None,
        include_taxon_ancestors: Annotated[
            Optional[StrictBool],
            Field(description="Include taxon ancestors in the response"),
        ] = None,
        per_page: Annotated[
            Optional[StrictStr],
            Field(
                description="Number of results to return in a `page`. The maximum value is generally 200 unless otherwise noted "
            ),
        ] = None,
        locale: Annotated[
            Optional[StrictStr],
            Field(description="Locale preference for taxon common names "),
        ] = None,
        preferred_place_id: Annotated[
            Optional[StrictInt],
            Field(description="Place preference for regional taxon common names "),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Site Search

        Given zero to many of following parameters, returns object matching the search criteria

        :param q: Search object properties
        :type q: str
        :param sources: Must be of this type
        :type sources: List[str]
        :param place_id: Must be associated with this place
        :type place_id: List[str]
        :param include_taxon_ancestors: Include taxon ancestors in the response
        :type include_taxon_ancestors: bool
        :param per_page: Number of results to return in a `page`. The maximum value is generally 200 unless otherwise noted
        :type per_page: str
        :param locale: Locale preference for taxon common names
        :type locale: str
        :param preferred_place_id: Place preference for regional taxon common names
        :type preferred_place_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._search_get_serialize(
            q=q,
            sources=sources,
            place_id=place_id,
            include_taxon_ancestors=include_taxon_ancestors,
            per_page=per_page,
            locale=locale,
            preferred_place_id=preferred_place_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
        }
        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _search_get_serialize(
        self,
        q,
        sources,
        place_id,
        include_taxon_ancestors,
        per_page,
        locale,
        preferred_place_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:
        _host = None

        _collection_formats: Dict[str, str] = {
            "sources": "csv",
            "place_id": "csv",
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if q is not None:
            _query_params.append(("q", q))

        if sources is not None:
            _query_params.append(("sources", sources))

        if place_id is not None:
            _query_params.append(("place_id", place_id))

        if include_taxon_ancestors is not None:
            _query_params.append(("include_taxon_ancestors", include_taxon_ancestors))

        if per_page is not None:
            _query_params.append(("per_page", per_page))

        if locale is not None:
            _query_params.append(("locale", locale))

        if preferred_place_id is not None:
            _query_params.append(("preferred_place_id", preferred_place_id))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/search",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
